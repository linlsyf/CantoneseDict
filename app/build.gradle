apply plugin: 'com.android.application'
apply plugin: 'org.greenrobot.greendao'
android {
    compileSdkVersion 30
    buildToolsVersion "30.0.3"

    dexOptions {
        javaMaxHeapSize "6g"

    }
    aaptOptions.cruncherEnabled = false
    aaptOptions.useNewCruncher = false
    defaultConfig {
        applicationId "com.linlsyf.cantonese"
        minSdkVersion 24
        targetSdkVersion 30
        versionCode 1
        versionName "0.0.1"
//
        flavorDimensions "versionCode"
        multiDexEnabled true
        javaCompileOptions { annotationProcessorOptions { includeCompileClasspath = true } }
////butterKnife注入使用到
        ndk {
            abiFilters 'armeabi' ,'arm64-v8a' /*, 'x86'*///, 'armeabi-v7a', 'x86_64', 'arm64-v8a'
        }
//        resConfigs "zh", "en"
////        manifestPlaceholders = [
////                JPUSH_PKGNAME : applicationId,
////                JPUSH_APPKEY : "4227f603d9fdcdb04b5e4c48", //JPush上注册的包名对应的appkey.
////                JPUSH_CHANNEL : "developer-default", //暂时填写默认值即可.
////
////        ]

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    signingConfigs {
        release
        config {
            keyAlias 'area'
            keyPassword 'lnsince1991'
            storeFile file('G:/AreaKeyStore.jks')
            storePassword 'lnsince1991'
        }
    }

    buildTypes {
        debug {
            minifyEnabled false
            signingConfig signingConfigs.config
            debuggable true
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

        release {
            minifyEnabled false
            debuggable true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
            minifyEnabled false
        }
    }

    signingConfigs {
        release
        config {
            keyAlias 'area'
            keyPassword 'lnsince1991'
            storeFile file('F:/ldh/签名/AreaKeyStore.jks')
            storePassword 'lnsince1991'
        }
    }
    buildTypes {
        debug {
            minifyEnabled false
            signingConfig signingConfigs.config
        }
        release {
            minifyEnabled false
            debuggable true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
            minifyEnabled false
        }
    }


    lintOptions {
        checkReleaseBuilds false
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        abortOnError false
    }
    productFlavors {
        app1 {
            manifestPlaceholders = [str: "releaseStr", package_name: "com.linlsyf.ime"]
            applicationId "com.linlsyf.ime"
            resValue "string", "app_name", "粤语开放词典"
            manifestPlaceholders = [ENVIRONMENT: "app1",
                                    JPUSH_PKGNAME : "com.linlsyf.ime"
            ]
        }


    }

    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
        }
    }
}

//
//intOptions {
//    checkReleaseBuilds false
//    // Or, if you prefer, you can continue to check for errors in release builds,
//    // but continue the build even when errors are found:
//    abortOnError false
//}



//
def Properties props = new Properties()
def propFile = new File('signing.properties')
if (propFile.canRead()){
    props.load(new FileInputStream(propFile))

    if (props!=null && props.containsKey('STORE_FILE') && props.containsKey('STORE_PASSWORD') &&
            props.containsKey('KEY_ALIAS') && props.containsKey('KEY_PASSWORD')) {
        android.signingConfigs.release.storeFile = file(props['STORE_FILE'])
        android.signingConfigs.release.storePassword = props['STORE_PASSWORD']
        android.signingConfigs.release.keyAlias = props['KEY_ALIAS']
        android.signingConfigs.release.keyPassword = props['KEY_PASSWORD']
    } else {
        println 'signing.properties found but some entries are missing'
        android.buildTypes.release.signingConfig = null
    }
}else {
    println 'signing.properties not found'
    android.buildTypes.release.signingConfig = null
}

repositories{
    flatDir {
        dirs 'libs'
    }
}
greendao {
    schemaVersion 1
    daoPackage 'com.core.db.greenDao.gen'
    targetGenDir 'src/main/java'
}

dependencies {

}