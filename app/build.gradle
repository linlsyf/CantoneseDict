apply plugin: 'com.android.application'
apply plugin: 'org.greenrobot.greendao'
android {
    compileSdkVersion 26
    buildToolsVersion  '26.0.2'
    dexOptions {
        javaMaxHeapSize "6g"

    }
    aaptOptions.cruncherEnabled = false
    aaptOptions.useNewCruncher = false
    defaultConfig {
        applicationId "com.linlsyf.area"
        minSdkVersion 22
        targetSdkVersion 24
        versionCode 1
        versionName "1.1.5"
        flavorDimensions "versionCode"
        multiDexEnabled true
        javaCompileOptions { annotationProcessorOptions { includeCompileClasspath = true } }//butterKnife注入使用到

        ndk {
            abiFilters "armeabi", "armeabi-v7a", "x86", "mips"
        }
        resConfigs "zh","en"
//        manifestPlaceholders = [
//                JPUSH_PKGNAME : applicationId,
//                JPUSH_APPKEY : "4227f603d9fdcdb04b5e4c48", //JPush上注册的包名对应的appkey.
//                JPUSH_CHANNEL : "developer-default", //暂时填写默认值即可.
//
//        ]

    }
    signingConfigs {
        release
        config {
            keyAlias 'area'
            keyPassword 'lnsince1991'
            storeFile file('F:/ldh/签名/AreaKeyStore.jks')
            storePassword 'lnsince1991'
        }
    }
    buildTypes {
        debug {
            minifyEnabled false
            signingConfig signingConfigs.config
        }
        release {
            minifyEnabled false
            debuggable true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
            minifyEnabled false
        }
    }

    lintOptions {
        checkReleaseBuilds false
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        abortOnError false
    }
    productFlavors {
        app1 {
            manifestPlaceholders = [str: "releaseStr", package_name: "com.linlsyf.area"]
            applicationId "com.linlsyf.area"
            resValue "string", "app_name", "一方"
            manifestPlaceholders = [ENVIRONMENT: "app1",
                                    app_icon   : "@drawable/ic_launcher",
                                                    JPUSH_PKGNAME : "com.linlsyf.area",
                JPUSH_APPKEY : "4227f603d9fdcdb04b5e4c48", //JPush上注册的包名对应的appkey.
                JPUSH_CHANNEL : "developer-default", //暂时填写默认值即可.
                        ]
        }

        appCantonese {
            manifestPlaceholders = [str: "releaseStr", package_name: "com.linlsyf.cantonese"]
            applicationId "com.linlsyf.cantonese"
            resValue "string", "app_name", "粤语开放词典"
            manifestPlaceholders = [ENVIRONMENT: "app2",
                                    app_icon   : "@drawable/cantonese",
                                    JPUSH_PKGNAME : "com.linlsyf.cantonese",
                                    JPUSH_APPKEY : "4227f603d9fdcdb04b5e4c48", //JPush上注册的包名对应的appkey.
                                    JPUSH_CHANNEL : "developer-default", //暂时填写默认值即可.
            ]
        }
    }
    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
        }
    }
}

def Properties props = new Properties()
def propFile = new File('signing.properties')
if (propFile.canRead()){
    props.load(new FileInputStream(propFile))

    if (props!=null && props.containsKey('STORE_FILE') && props.containsKey('STORE_PASSWORD') &&
            props.containsKey('KEY_ALIAS') && props.containsKey('KEY_PASSWORD')) {
        android.signingConfigs.release.storeFile = file(props['STORE_FILE'])
        android.signingConfigs.release.storePassword = props['STORE_PASSWORD']
        android.signingConfigs.release.keyAlias = props['KEY_ALIAS']
        android.signingConfigs.release.keyPassword = props['KEY_PASSWORD']
    } else {
        println 'signing.properties found but some entries are missing'
        android.buildTypes.release.signingConfig = null
    }
}else {
    println 'signing.properties not found'
    android.buildTypes.release.signingConfig = null
}

repositories{
    flatDir {
        dirs 'libs'
    }
}

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'org.greenrobot:greendao-gradle-plugin:3.0.0'
    }
}

greendao {
    schemaVersion 1
    daoPackage 'com.core.db.greenDao.gen'
    targetGenDir 'src/main/java'
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation(name: 'dynamicrecycleview', ext: 'aar')
    //aar引用
    implementation(name: 'utils', ext: 'aar')
    //aar引用
    implementation(name: 'easywidget', ext: 'aar')
    //aar引用
    implementation 'org.greenrobot:greendao:3.0.1'
    implementation 'org.greenrobot:greendao-generator:3.0.0'
    implementation 'com.jakewharton:butterknife:7.0.1'
    compile 'cn.jiguang.sdk:jpush:3.1.1'
    compile 'cn.jiguang.sdk:jcore:1.1.9'
    implementation 'com.tencent.bugly:crashreport:2.8.6.0'
    //其中latest.release指代最新Bugly SDK版本号，也可以指定明确的版本号，例如2.1.9
    implementation 'com.tencent.bugly:nativecrashreport:3.6.0.0'
    //其中latest.release指代最新Bugly NDK版本号，也可以指定明确的版本号，例如3.0
    implementation 'top.zibin:Luban:1.1.3'
    implementation 'com.android.support:multidex:1.0.2'
    //    implementation 'com.dyhdyh.compat.mmrc:media-metadata-retriever-compat:1.0.6'
    //可选(全平台，如果不引入会自动使用原生API)
    implementation 'com.github.wseemann:FFmpegMediaMetadataRetriever:1.0.14'
    implementation 'io.reactivex.rxjava2:rxjava:2.1.1'
    implementation 'io.reactivex.rxjava2:rxandroid:2.0.1'
    // 最基础的架构，仅提供了系统默认的图片选择器和拍照功能
    implementation 'com.github.qingmei2:rximagepicker:0.4.0'
    // 提供了自定义UI图片选择器的基本组件，自定义UI的需求需要添加该依赖
    implementation 'com.github.qingmei2:rximagepicker_support:0.4.0'
    // 如果需要额外的UI支持，请选择依赖对应的UI拓展库
    implementation 'com.github.qingmei2:rximagepicker_support_wechat:0.4.0'
    // 微信图片选择器
    implementation 'com.tencent.mm.opensdk:wechat-sdk-android-with-mta:5.3.1'
    implementation 'com.squareup.okhttp3:okhttp:3.9.1'
}
