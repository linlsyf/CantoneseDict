package com.core.db.greenDao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.core.db.greenDao.entity.SentenceYy;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SENTENCE_YY".
*/
public class SentenceYyDao extends AbstractDao<SentenceYy, String> {

    public static final String TABLENAME = "SENTENCE_YY";

    /**
     * Properties of entity SentenceYy.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property CreateTime = new Property(2, String.class, "createTime", false, "CREATE_TIME");
        public final static Property ModifyTime = new Property(3, String.class, "modifyTime", false, "MODIFY_TIME");
        public final static Property Type = new Property(4, int.class, "type", false, "TYPE");
        public final static Property Status = new Property(5, int.class, "status", false, "STATUS");
        public final static Property Count = new Property(6, int.class, "count", false, "COUNT");
        public final static Property Simple = new Property(7, int.class, "simple", false, "SIMPLE");
        public final static Property TranName = new Property(8, String.class, "tranName", false, "TRAN_NAME");
        public final static Property TranPy = new Property(9, String.class, "tranPy", false, "TRAN_PY");
        public final static Property Py = new Property(10, String.class, "py", false, "PY");
        public final static Property Content = new Property(11, String.class, "content", false, "CONTENT");
    };


    public SentenceYyDao(DaoConfig config) {
        super(config);
    }
    
    public SentenceYyDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SENTENCE_YY\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"CREATE_TIME\" TEXT," + // 2: createTime
                "\"MODIFY_TIME\" TEXT," + // 3: modifyTime
                "\"TYPE\" INTEGER NOT NULL ," + // 4: type
                "\"STATUS\" INTEGER NOT NULL ," + // 5: status
                "\"COUNT\" INTEGER NOT NULL ," + // 6: count
                "\"SIMPLE\" INTEGER NOT NULL ," + // 7: simple
                "\"TRAN_NAME\" TEXT," + // 8: tranName
                "\"TRAN_PY\" TEXT," + // 9: tranPy
                "\"PY\" TEXT," + // 10: py
                "\"CONTENT\" TEXT);"); // 11: content
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SENTENCE_YY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SentenceYy entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindString(3, createTime);
        }
 
        String modifyTime = entity.getModifyTime();
        if (modifyTime != null) {
            stmt.bindString(4, modifyTime);
        }
        stmt.bindLong(5, entity.getType());
        stmt.bindLong(6, entity.getStatus());
        stmt.bindLong(7, entity.getCount());
        stmt.bindLong(8, entity.getSimple());
 
        String tranName = entity.getTranName();
        if (tranName != null) {
            stmt.bindString(9, tranName);
        }
 
        String tranPy = entity.getTranPy();
        if (tranPy != null) {
            stmt.bindString(10, tranPy);
        }
 
        String py = entity.getPy();
        if (py != null) {
            stmt.bindString(11, py);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(12, content);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SentenceYy entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindString(3, createTime);
        }
 
        String modifyTime = entity.getModifyTime();
        if (modifyTime != null) {
            stmt.bindString(4, modifyTime);
        }
        stmt.bindLong(5, entity.getType());
        stmt.bindLong(6, entity.getStatus());
        stmt.bindLong(7, entity.getCount());
        stmt.bindLong(8, entity.getSimple());
 
        String tranName = entity.getTranName();
        if (tranName != null) {
            stmt.bindString(9, tranName);
        }
 
        String tranPy = entity.getTranPy();
        if (tranPy != null) {
            stmt.bindString(10, tranPy);
        }
 
        String py = entity.getPy();
        if (py != null) {
            stmt.bindString(11, py);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(12, content);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public SentenceYy readEntity(Cursor cursor, int offset) {
        SentenceYy entity = new SentenceYy( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // createTime
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // modifyTime
            cursor.getInt(offset + 4), // type
            cursor.getInt(offset + 5), // status
            cursor.getInt(offset + 6), // count
            cursor.getInt(offset + 7), // simple
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // tranName
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // tranPy
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // py
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // content
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SentenceYy entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCreateTime(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setModifyTime(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setType(cursor.getInt(offset + 4));
        entity.setStatus(cursor.getInt(offset + 5));
        entity.setCount(cursor.getInt(offset + 6));
        entity.setSimple(cursor.getInt(offset + 7));
        entity.setTranName(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setTranPy(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setPy(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setContent(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    @Override
    protected final String updateKeyAfterInsert(SentenceYy entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(SentenceYy entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
