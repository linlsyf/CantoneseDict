package com.core.db.greenDao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.core.db.greenDao.entity.Favorites;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FAVORITES".
*/
public class FavoritesDao extends AbstractDao<Favorites, String> {

    public static final String TABLENAME = "FAVORITES";

    /**
     * Properties of entity Favorites.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Hint = new Property(2, String.class, "hint", false, "HINT");
        public final static Property Type = new Property(3, String.class, "type", false, "TYPE");
        public final static Property Content = new Property(4, String.class, "content", false, "CONTENT");
        public final static Property Desc = new Property(5, String.class, "desc", false, "DESC");
        public final static Property Createorid = new Property(6, String.class, "createorid", false, "CREATEORID");
        public final static Property Createorname = new Property(7, String.class, "createorname", false, "CREATEORNAME");
        public final static Property UpdateuserId = new Property(8, String.class, "updateuserId", false, "UPDATEUSER_ID");
        public final static Property Createtime = new Property(9, String.class, "createtime", false, "CREATETIME");
        public final static Property Updatetime = new Property(10, String.class, "updatetime", false, "UPDATETIME");
    }


    public FavoritesDao(DaoConfig config) {
        super(config);
    }
    
    public FavoritesDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FAVORITES\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"HINT\" TEXT," + // 2: hint
                "\"TYPE\" TEXT," + // 3: type
                "\"CONTENT\" TEXT," + // 4: content
                "\"DESC\" TEXT," + // 5: desc
                "\"CREATEORID\" TEXT," + // 6: createorid
                "\"CREATEORNAME\" TEXT," + // 7: createorname
                "\"UPDATEUSER_ID\" TEXT," + // 8: updateuserId
                "\"CREATETIME\" TEXT," + // 9: createtime
                "\"UPDATETIME\" TEXT);"); // 10: updatetime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FAVORITES\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Favorites entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String hint = entity.getHint();
        if (hint != null) {
            stmt.bindString(3, hint);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(4, type);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(5, content);
        }
 
        String desc = entity.getDesc();
        if (desc != null) {
            stmt.bindString(6, desc);
        }
 
        String createorid = entity.getCreateorid();
        if (createorid != null) {
            stmt.bindString(7, createorid);
        }
 
        String createorname = entity.getCreateorname();
        if (createorname != null) {
            stmt.bindString(8, createorname);
        }
 
        String updateuserId = entity.getUpdateuserId();
        if (updateuserId != null) {
            stmt.bindString(9, updateuserId);
        }
 
        String createtime = entity.getCreatetime();
        if (createtime != null) {
            stmt.bindString(10, createtime);
        }
 
        String updatetime = entity.getUpdatetime();
        if (updatetime != null) {
            stmt.bindString(11, updatetime);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Favorites entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String hint = entity.getHint();
        if (hint != null) {
            stmt.bindString(3, hint);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(4, type);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(5, content);
        }
 
        String desc = entity.getDesc();
        if (desc != null) {
            stmt.bindString(6, desc);
        }
 
        String createorid = entity.getCreateorid();
        if (createorid != null) {
            stmt.bindString(7, createorid);
        }
 
        String createorname = entity.getCreateorname();
        if (createorname != null) {
            stmt.bindString(8, createorname);
        }
 
        String updateuserId = entity.getUpdateuserId();
        if (updateuserId != null) {
            stmt.bindString(9, updateuserId);
        }
 
        String createtime = entity.getCreatetime();
        if (createtime != null) {
            stmt.bindString(10, createtime);
        }
 
        String updatetime = entity.getUpdatetime();
        if (updatetime != null) {
            stmt.bindString(11, updatetime);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public Favorites readEntity(Cursor cursor, int offset) {
        Favorites entity = new Favorites( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // hint
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // type
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // content
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // desc
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // createorid
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // createorname
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // updateuserId
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // createtime
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10) // updatetime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Favorites entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setHint(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setType(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setContent(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDesc(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCreateorid(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCreateorname(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setUpdateuserId(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setCreatetime(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setUpdatetime(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
     }
    
    @Override
    protected final String updateKeyAfterInsert(Favorites entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(Favorites entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Favorites entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
