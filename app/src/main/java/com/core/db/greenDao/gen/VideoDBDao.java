package com.core.db.greenDao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.core.db.greenDao.entity.VideoDB;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "VIDEO_DB".
*/
public class VideoDBDao extends AbstractDao<VideoDB, String> {

    public static final String TABLENAME = "VIDEO_DB";

    /**
     * Properties of entity VideoDB.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Data = new Property(2, String.class, "data", false, "DATA");
        public final static Property OldFilePath = new Property(3, String.class, "oldFilePath", false, "OLD_FILE_PATH");
        public final static Property ThumbPath = new Property(4, String.class, "thumbPath", false, "THUMB_PATH");
        public final static Property Duration = new Property(5, long.class, "duration", false, "DURATION");
        public final static Property Size = new Property(6, long.class, "size", false, "SIZE");
        public final static Property DurationString = new Property(7, String.class, "durationString", false, "DURATION_STRING");
    };


    public VideoDBDao(DaoConfig config) {
        super(config);
    }
    
    public VideoDBDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"VIDEO_DB\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"DATA\" TEXT," + // 2: data
                "\"OLD_FILE_PATH\" TEXT," + // 3: oldFilePath
                "\"THUMB_PATH\" TEXT," + // 4: thumbPath
                "\"DURATION\" INTEGER NOT NULL ," + // 5: duration
                "\"SIZE\" INTEGER NOT NULL ," + // 6: size
                "\"DURATION_STRING\" TEXT);"); // 7: durationString
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"VIDEO_DB\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, VideoDB entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String data = entity.getData();
        if (data != null) {
            stmt.bindString(3, data);
        }
 
        String oldFilePath = entity.getOldFilePath();
        if (oldFilePath != null) {
            stmt.bindString(4, oldFilePath);
        }
 
        String thumbPath = entity.getThumbPath();
        if (thumbPath != null) {
            stmt.bindString(5, thumbPath);
        }
        stmt.bindLong(6, entity.getDuration());
        stmt.bindLong(7, entity.getSize());
 
        String durationString = entity.getDurationString();
        if (durationString != null) {
            stmt.bindString(8, durationString);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, VideoDB entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String data = entity.getData();
        if (data != null) {
            stmt.bindString(3, data);
        }
 
        String oldFilePath = entity.getOldFilePath();
        if (oldFilePath != null) {
            stmt.bindString(4, oldFilePath);
        }
 
        String thumbPath = entity.getThumbPath();
        if (thumbPath != null) {
            stmt.bindString(5, thumbPath);
        }
        stmt.bindLong(6, entity.getDuration());
        stmt.bindLong(7, entity.getSize());
 
        String durationString = entity.getDurationString();
        if (durationString != null) {
            stmt.bindString(8, durationString);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public VideoDB readEntity(Cursor cursor, int offset) {
        VideoDB entity = new VideoDB( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // data
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // oldFilePath
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // thumbPath
            cursor.getLong(offset + 5), // duration
            cursor.getLong(offset + 6), // size
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // durationString
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, VideoDB entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setData(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setOldFilePath(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setThumbPath(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDuration(cursor.getLong(offset + 5));
        entity.setSize(cursor.getLong(offset + 6));
        entity.setDurationString(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final String updateKeyAfterInsert(VideoDB entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(VideoDB entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
